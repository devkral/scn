

class scnPageNavigation(Gtk.Grid):
  parent=None
  linkback=None

  cur_server=None #use only after set by scnupdate
  cur_domain=None #use only after set by scnupdate
  cur_channel=None #use only after set by scnupdate
  box_select_handler_id=None
  box_activate_handler_id=None

  def __init__(self,_parent):
    Gtk.Grid.__init__(self)
    self.parent=_parent
    self.linkback=self.parent.linkback

    self.set_row_spacing(2)
    self.set_margin_left(5)
    self.set_margin_right(5)
    self.set_margin_top(5)
    self.set_margin_bottom(2)

    self.navbar=Gtk.Entry()
    self.navbar.connect("activate",self.navbarupdate)
    self.navcontent=Gtk.ListStore(str,str)
    
    self.navbox=Gtk.TreeView(self.navcontent)
    self.navbox.set_activate_on_single_click(False)
    renderer = Gtk.CellRendererText()
    renderer2 = Gtk.CellRendererText()
    tempelem = Gtk.TreeViewColumn("", renderer2, text=0)
    self.listelems = Gtk.TreeViewColumn("Title", renderer, text=1)
    self.navbox.append_column(tempelem)
    self.navbox.append_column(self.listelems)
    self.navbox.get_selection().set_mode(Gtk.SelectionMode.BROWSE)
    self.navbox.set_vexpand(True)
    self.navcontextmain=Gtk.Frame()
    #self.navcontextmain.set_margin_right(5)
    self.navcontextmain.set_hexpand(True)
    self.navcontextmain.set_shadow_type(Gtk.ShadowType.NONE)

    navcontainer=Gtk.Grid()
    navcontainer.set_column_spacing(2)

    #navcontainer.set_margin_top(2)
    #navcontainer.set_margin_left(5)
    #navcontainer.set_margin_right(5)
    labelnavbar=Gtk.Label("Navigation: ")
    navbarconfirm=Gtk.Button("OK")
    navbarconfirm.connect("clicked",self.navbarupdate)
    navcontainer.attach(labelnavbar,0,0,1,1)
    self.navbar.set_hexpand (True)
    self.navbar.connect("activate",self.navbarupdate)
    navcontainer.attach(self.navbar,1,0,1,1)
    navcontainer.attach(navbarconfirm,2,0,1,1)

    self.attach(navcontainer,0,0,2,1)
    self.attach(Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL),0,1,2,1)

    frame_nav=Gtk.Frame()
    frame_nav.add(self.navbox)
    frame_nav.set_margin_left(5)
    frame_nav.set_margin_right(5)

    #self.attach(self.navcontextsmall,0,2,1,1)
    self.attach(frame_nav,0,2,1,1)

    
    self.navcontextmain.set_label_align(0.1,0.8)
    self.attach(self.navcontextmain,1,2,1,1)
    self.update()


  def update(self,_server=None,_domain=None,_channel=None):
    if _server=="":
      _server=None
    self.cur_server=_server
    self.cur_domain=_domain
    self.cur_channel=_channel

      #self.navbar.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.7, 1, 0.7, 1))
    if _channel is not None:
      self.navbar.set_text(self.cur_server+"/"+self.cur_domain+"/"+self.cur_channel)
      self.buildchannelgui()

    elif _domain is not None:
      self.navbar.set_text(self.cur_server+"/"+self.cur_domain+"/")
      self.builddomaingui()

    elif _server is not None:
      self.navbar.set_text(self.cur_server+"/")
      self.buildservergui()
      
    else:
      self.navbar.set_text("")
      self.buildNonegui()
  #update by navbar
  def navbarupdate(self, *args):
    splitnavbar=self.navbar.get_text().strip("/").rstrip("/").split("/")
    self.update(*splitnavbar[:3])

  def updateserverlist(self):
    temp2=self.linkback.main.scn_servers.list_servers()
    if temp2 is None:
      return False
    self.listelems.set_title("Server")
    self.navbox.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.5, 0.5, 1, 1))
    self.navbox.show()
    self.navcontent.clear()
    for elem in temp2:
      self.navcontent.append(("",elem[0]))

  def updatedomainlist(self):
    temp_remote=self.linkback.main.c_list_domains(self.cur_server)
    if temp_remote is None:
      return False
    temp_local=self.linkback.main.scn_servers.list_domains(self.cur_server)
    self.navbox.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1, 0.7, 0.7, 1))
    self.navbox.show()
    self.listelems.set_title("Domain")
    self.navcontent.clear()

    for elem in temp_local:
      if elem[0] not in temp_remote:
        self.navcontent.append(("local:",elem[0]))
    for elem in temp_remote:
      self.navcontent.append(("",elem))
    return True

  def updatechannellist(self):
    temp2=self.linkback.main.c_list_channels(self.cur_server,self.cur_domain)
    if temp2 is None:
      return False
    self.navbox.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.7, 1, 0.7, 1))
    self.navbox.show()
    self.listelems.set_title("Channel")
    self.navcontent.clear()
    for elem in temp2:
      self.navcontent.append(("",elem))

  def updatenodelist(self):
    self.navbox.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.2, 0.2, 0.2, 1))
    self.navbox.show()
    self.navcontent.clear()

    if self.cur_channel=="admin":
      self.navbox.hide()
      #self.listelems.set_title("Admin")
      return True
    elif self.cur_channel=="special" or \
       self.cur_channel in self.special_channels:
      self.navbox.hide()
#      self.listelems.set_title("Special")
      return True
    self.navbox.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.7, 0.5, 0.5, 1))

    temp2=self.linkback.main.c_get_channel(self.cur_server,self.cur_domain,self.cur_channel)
    if temp2 is None:
      return False
    self.listelems.set_title("Users")
    for elem in temp2:
      self.navcontent.append(("",elem))

  def buildNonegui(self):
    if self.updateserverlist()==False:
      self.parent.state_widget.set_text("Error loading servers")
    if self.box_select_handler_id!=None:
      self.navbox.disconnect(self.box_select_handler_id)
      self.box_select_handler_id=None
      
    if self.box_activate_handler_id!=None:
      self.navbox.disconnect(self.box_activate_handler_id)
      self.box_activate_handler_id=None
    #label counts as child, so ignore it
    if len(self.navcontextmain.get_children())==1:
      self.navcontextmain.get_children()[0].destroy()
      #self.navcontextmain.set_label("Context")
    #build grid for contextarea
    contextcont=Gtk.Grid()
    self.navcontextmain.add(contextcont)
    contextcont.set_row_spacing(2)
    contextcont.set_column_spacing(2)
    #contextcont.set_border_width(2)

    navcont_f=Gtk.Frame()
    navcont_f.set_label("Navigation")
    navcont=Gtk.Grid()
    navcont.set_row_spacing(2)
    navcont.set_border_width(2)
    navcont_f.add(navcont)
    contextcont.attach(navcont_f,0,0,1,1)

    goServerButton1=Gtk.Button("Use Server")
    goServerButton1.connect("clicked", self.select_server)
    navcont.attach(goServerButton1,0,0,1,1)


    servercont_f=Gtk.Frame()
    servercont_f.set_label("Server Actions")
    servercont=Gtk.Grid()
    servercont.set_row_spacing(2)
    servercont.set_border_width(2)
    servercont_f.add(servercont)
    contextcont.attach(servercont_f,0,1,1,1)


    addServerButton1=Gtk.Button("Add Server")
    addServerButton1.connect("clicked", self.add_server)
    servercont.attach(addServerButton1,0,0,1,1)
    deleteServerButton1=Gtk.Button("Delete Server")
    deleteServerButton1.connect("clicked", self.delete_server)
    servercont.attach(deleteServerButton1,0,1,1,1)
    
    editServerButton1=Gtk.Button("Edit Server")
    editServerButton1.connect("clicked", self.edit_server2)
    servercont.attach(editServerButton1,0,2,1,1)


    #building frame showing message
    messagef2=Gtk.Frame()
    messagef2.set_label("Message")
    self.selectedservermessage=Gtk.Label()
    self.selectedservermessage.set_selectable(True)
    #self.linkback.main.c_get_domain_message(self.cur_server,self.cur_domain)
    
    self.selectedservermessage.set_halign(Gtk.Align.START)
    self.selectedservermessage.set_valign(Gtk.Align.START)
    self.selectedservermessage.set_hexpand(True)
    self.selectedservermessage.set_vexpand(True)
    messagef2.add(self.selectedservermessage)
    contextcont.attach(messagef2,1,1,1,1)
    self.box_select_handler_id=self.navbox.connect("cursor-changed",self.select_context_server)
    self.box_activate_handler_id=self.navbox.connect("row-activated",self.select_server)
    self.navcontextmain.show_all()



  def buildservergui(self):
    if self.updatedomainlist()==False:
      self.navbar.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1, 0, 0, 1))
      self.buildNonegui()
      return
    if self.box_select_handler_id!=None:
      self.navbox.disconnect(self.box_select_handler_id)
      self.box_select_handler_id=None

    if self.box_activate_handler_id!=None:
      self.navbox.disconnect(self.box_activate_handler_id)
      self.box_activate_handler_id=None
    if len(self.navcontextmain.get_children())==1:
      #print(self.navcontextmain.get_children())
      self.navcontextmain.get_children()[0].destroy()
      #print(self.navcontextmain.get_children())
    #build grid for contextarea
    contextcont=Gtk.Grid()
    contextcont.set_column_spacing(2)
    contextcont.set_row_spacing(2)
    self.navcontextmain.add(contextcont)

    
    navcont_f=Gtk.Frame()
    navcont_f.set_label("Navigation")
    navcont=Gtk.Grid()
    navcont.set_row_spacing(2)
    navcont.set_border_width(2)
    navcont_f.add(navcont)
    contextcont.attach(navcont_f,0,0,1,1)
    
    
    goNoneButton2=Gtk.Button("Go back")
    goNoneButton2.connect("clicked", self.goback_none)
    navcont.attach(goNoneButton2,0,0,1,1)

    goDomainButton1=Gtk.Button("Use Domain")
    goDomainButton1.connect("clicked", self.select_domain)
    navcont.attach(goDomainButton1,0,1,1,1)

    ### server actions ###

    servercont_f=Gtk.Frame()
    servercont_f.set_label("Server actions")
    servercont=Gtk.Grid()
    servercont.set_row_spacing(2)
    servercont.set_border_width(2)
    servercont_f.add(servercont)
    contextcont.attach(servercont_f,0,1,1,1)

    deleteServerButton3=Gtk.Button("Delete server")
    deleteServerButton3.connect("clicked", self.delete_server2)
    servercont.attach(deleteServerButton3,0,0,1,1)
    
    editServerButton1=Gtk.Button("Edit Server")
    editServerButton1.connect("clicked", self.edit_server2)
    servercont.attach(editServerButton1,0,1,1,1)

    
    
    ### domain actions ###

    domaincont_f=Gtk.Frame()
    domaincont_f.set_label("Domain actions")
    domaincont=Gtk.Grid()
    domaincont.set_row_spacing(2)
    domaincont.set_border_width(2)
    domaincont_f.add(domaincont)
    contextcont.attach(domaincont_f,0,2,1,1)


    addDomainButton1=Gtk.Button("Register Domain")
    addDomainButton1.connect("clicked", self.register_domain)
    domaincont.attach(addDomainButton1,0,0,1,1)
    

    deleteDomainButton3=Gtk.Button("Delete Domain")
    deleteDomainButton3.connect("clicked", self.delete_domain)
    domaincont.attach(deleteDomainButton3,0,1,1,1)


    ### space for message
    #building frame showing message
    messagef=Gtk.Frame()
    messagef.set_label("Server Message")
    tempmessage=self.linkback.main.c_get_server_message(self.cur_server)
    tempshowlabel=Gtk.Label()
    tempshowlabel.set_selectable(True)
    tempshowlabel.set_halign(Gtk.Align.START)
    tempshowlabel.set_valign(Gtk.Align.START)
    tempshowlabel.set_hexpand(True)
    messagef.add(tempshowlabel)
    if tempmessage is None or tempmessage=="":
      tempshowlabel.set_text("No message")
    else:
      tempshowlabel.set_text(tempmessage)
    contextcont.attach(messagef,1,0,1,1)

    #building frame showing message
    messagef2=Gtk.Frame()
    messagef2.set_label("Message")
    self.selecteddomainmessage=Gtk.Label()
    self.selecteddomainmessage.set_halign(Gtk.Align.START)
    self.selecteddomainmessage.set_valign(Gtk.Align.START)
    self.selecteddomainmessage.set_selectable(True)
    #self.linkback.main.c_get_domain_message(self.cur_server,self.cur_domain)
    self.selecteddomainmessage.set_hexpand(True)
    self.selecteddomainmessage.set_vexpand(True)
    messagef2.add(self.selecteddomainmessage)
    contextcont.attach(messagef2,1,1,1,2)
    self.box_select_handler_id=self.navbox.connect("cursor-changed",self.select_context_domain)
    
    self.box_select_handler_id=self.navbox.connect("row-activated",self.select_domain)

#    self.servercont_f.show_all()
#    self.domaincont_f.show_all()
    self.navcontextmain.show_all()

  def builddomaingui(self):
    
    if self.updatechannellist()==False:
      self.navbar.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(1, 0, 0, 1))
      self.buildservergui()
      return
    if self.box_select_handler_id!=None:
      self.navbox.disconnect(self.box_select_handler_id)
      self.box_select_handler_id=None
    
    if self.box_activate_handler_id!=None:
      self.navbox.disconnect(self.box_activate_handler_id)
      self.box_activate_handler_id=None
    #label counts as child
    if len(self.navcontextmain.get_children())==1:
      self.navcontextmain.get_children()[0].destroy()
    #build grid for contextarea
    contextcont=Gtk.Grid()
    contextcont.set_column_spacing(2)
    contextcont.set_row_spacing(2)
    self.navcontextmain.add(contextcont)

    navcont_f=Gtk.Frame()
    navcont_f.set_label("Navigation")
    navcont=Gtk.Grid()
    navcont.set_row_spacing(2)
    navcont.set_border_width(2)
    navcont_f.add(navcont)
    contextcont.attach(navcont_f,0,0,1,1)

    goChannelButton1=Gtk.Button("Use Channel")
    goChannelButton1.connect("clicked", self.select_channel)
    navcont.attach(goChannelButton1,0,0,1,1)

    goServerButton2=Gtk.Button("Go back")
    goServerButton2.connect("clicked", self.goback_server)
    navcont.attach(goServerButton2,0,1,1,1)


    channelcont_f=Gtk.Frame()
    channelcont_f.set_label("Channel actions")
    channelcont=Gtk.Grid()
    channelcont.set_row_spacing(2)
    channelcont.set_border_width(2)
    channelcont_f.add(channelcont)
    contextcont.attach(channelcont_f,0,1,1,1)

    if self.linkback.main.scn_servers.get_channel(self.cur_server,self.cur_domain,"admin") is not None:
      addChannelButton2=Gtk.Button("Add channel")
      addChannelButton2.connect("clicked", self.add_channel)
      channelcont.attach(addChannelButton2,0,0,1,1)

      delChannelButton2=Gtk.Button("Delete channel")
      delChannelButton2.connect("clicked", self.delete_channel)
      channelcont.attach(delChannelButton2,0,1,1,1)

    #building frame showing message
    messagef=Gtk.Frame()
    messagef.set_label("Message")
    tempmessage=self.linkback.main.c_get_domain_message(self.cur_server,self.cur_domain)
    tempshowlabel=Gtk.Label()
    tempshowlabel.set_selectable(True)
    
    tempshowlabel.set_hexpand(True)
    tempshowlabel.set_halign(Gtk.Align.START)
    tempshowlabel.set_valign(Gtk.Align.START)
    messagef.add(tempshowlabel)
    if tempmessage is None or tempmessage=="":
      tempshowlabel.set_text("No message")
    else:
      tempshowlabel.set_text(tempmessage)
    contextcont.attach(messagef,1,0,1,1)
    self.channelf=Gtk.Frame()
    self.channelf.set_vexpand(True)
    self.channelf.set_hexpand(True)
    self.channelf.set_shadow_type(Gtk.ShadowType.NONE)
    contextcont.attach(self.channelf,1,1,1,1)
    self.box_select_handler_id=self.navbox.connect("cursor-changed",self.select_context_channel)
    self.box_activate_handler_id=self.navbox.connect("row-activated",self.select_channel)

    self.navcontextmain.show_all()


  ### channel gui ###

  def buildchannelgui(self):
    if self.cur_server is None or self.cur_domain is None or self.cur_channel is None:
      self.builddomaingui()
      return
    #if self.box_select_handler_id!=None:
    #  self.navbox.disconnect(self.box_select_handler_id)
    #  self.box_select_handler_id=None
    self.updatenodelist()

    #label counts as child
    if len(self.navcontextmain.get_children())==1:
      self.navcontextmain.get_children()[0].destroy()
    
    contextcont=Gtk.Grid()
    contextcont.set_column_spacing(2)
    contextcont.set_row_spacing(2)
    self.navcontextmain.add(contextcont)


    managecont_f=Gtk.Frame()
    managecont_f.set_label("Basic Actions:")
    managecont=Gtk.Grid()
    managecont.set_row_spacing(2)
    managecont.set_border_width(2)
    managecont_f.add(managecont)
    contextcont.attach(managecont_f,0,0,1,1)

    if self.linkback.main.scn_servers.get_channel(self.cur_server,self.cur_domain,self.cur_channel) is None:
      createreqButton2=Gtk.Button("Create Request")
      createreqButton2.connect("clicked", self.goback_domain)
      managecont.attach(createreqButton2,0,0,1,1)

      self.ChannelRequest_entry=Gtk.Entry()
      managecont.attach(self.ChannelRequest_entry,1,0,1,1)
    else:

      delreqButton2=Gtk.Button("Delete Request")
      delreqButton2.connect("clicked", self.goback_domain)
      managecont.attach(delreqButton2,0,0,2,1)



    goDomainButton2=Gtk.Button("Go back")
    goDomainButton2.connect("clicked", self.goback_domain)
    managecont.attach(goDomainButton2,0,1,2,1)


    if self.linkback.main.scn_servers.get_channel(self.cur_server,self.cur_domain,self.cur_channel) is not None:
      selfmincont_f=Gtk.Frame()
      selfmincont_f.set_label("Self administration")
      selfmincont=Gtk.Grid()
      selfmincont.set_row_spacing(2)
      selfmincont.set_border_width(2)
      selfmincont_f.add(selfmincont)
      contextcont.attach(selfmincont_f,1,0,1,1)

    if self.linkback.main.scn_servers.get_channel(self.cur_server,self.cur_domain,"admin") is not None:
      admincont_f=Gtk.Frame()
      admincont_f.set_label("Node management")
      admincont=Gtk.Grid()
      admincont.set_row_spacing(2)
      admincont.set_border_width(2)
      admincont_f.add(admincont)
      contextcont.attach(admincont_f,0,1,1,1)



    temp=self.genchannelcontext(self.cur_channel)
    temp.set_vexpand(True)
    temp.set_hexpand(True)
    contextcont.attach(temp,1,1,1,1)
    self.navcontextmain.show_all()
    

  def genchannelcontext(self,_channel):
    if _channel=="admin":
      adminsc_f=Gtk.Frame()
      adminsc_f.set_label("Admin")
      if self.linkback.main.scn_servers.get_channel(self.cur_server,self.cur_domain,"admin") is None:
        adminsc_f.add(Gtk.Label("No permission"))
        adminsc_f.show_all()
        return adminsc_f
      adminsc=Gtk.Grid()
      adminsc.set_row_spacing(2)
      adminsc.set_border_width(2)
      adminsc_f.add(adminsc)
      adminsc_f.show_all()
      return adminsc_f
    elif _channel=="special" or \
         _channel in self.special_channels:
      spsc_f=Gtk.Frame()
      spsc_f.set_label("Specialchannel")
      if self.scn_servers.get_channel(self.cur_server,self.cur_domain,_channel) is None and \
         self.scn_servers.get_channel(self.cur_server,self.cur_domain,"special") is None and \
         self.scn_servers.get_channel(self.cur_server,self.cur_domain,"admin") is None:
        temp=Gtk.Label("No permission")
        spsc_f.add(temp)
        spsc_f.show_all()
        return spsc_f
      spsc=Gtk.Grid()
      spsc.set_row_spacing(2)
      spsc.set_border_width(2)
      spsc_f.add(spsc)
      addnodebut=Gtk.Button("Add Node")
      spsc.attach(addnodebut,0,0,1,1)
      addservebut=Gtk.Button("Add Channel")
      spsc.attach(addservebut,0,1,1,1)
      
      changemessagebut=Gtk.Button()
      if self.cur_domain=="admin":
        changemessagebut.set_text("Change Server Message")
      else:
        changemessagebut.set_text("Change Domain Message")
      spsc.attach(changemessagebut,0,2,1,1)
      #addusertochannel
      spsc_f.show_all()
      return spsc_f
    elif _channel=="main":
      mainsc_f=Gtk.Frame()
      mainsc_f.set_label("Main node")
      mainsc=Gtk.Grid()
      mainsc.set_row_spacing(2)
      mainsc.set_border_width(2)
      mainsc_f.add(mainsc)
      return mainsc_f
    elif _channel=="notify":
      notifysc_f=Gtk.Frame()
      notifysc_f.set_label("Notify")
      notifysc=Gtk.Grid()
      notifysc.set_row_spacing(2)
      notifysc.set_border_width(2)
      notifysc_f.add(notifysc)
      return notifysc_f
    else:
      defaultsc_f=Gtk.Frame()
      defaultsc_f.set_label("__"+_channel)
      defaultsc=Gtk.Grid()
      defaultsc.set_row_spacing(2)
      defaultsc.set_border_width(2)
      defaultsc_f.add(defaultsc)

      return defaultsc_f

    ######################################################################

      

    self.serverlist.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.2, 0, 0, 1))
    cont.attach(self.serverlist, 0, 1, 1, 1)
    server_actions=Gtk.Notebook()
    server_actions.append_page(self.gen_server_add(), Gtk.Label("+"))

    server_actions.append_page(self.gen_server_edit(), Gtk.Label("="))
    server_actions.append_page(self.gen_server_delete(), Gtk.Label("-"))
    cont.attach(server_actions,0,2,1,1)
    
    cont.attach(Gtk.Label("Name"), 1, 0, 1, 1)
    self.namelist=Gtk.TreeView(store)
    self.namelist.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.2, 0.1, 0, 1))
    cont.attach(self.namelist, 1, 1, 1, 1)

    cont.attach(Gtk.Label("Service"), 2, 0, 1, 1)
    self.servicelist=Gtk.TreeView(store)
    self.servicelist.override_background_color(Gtk.StateFlags.NORMAL, Gdk.RGBA(0.2, 0.1, 0.5, 1))
    cont.attach(self.servicelist, 2, 1, 1, 1)

    
    self.add(cont)
    self.update()
    self.show_all()

  def gen_server_add(self):
    cont=Gtk.Grid()
    cont.attach(Gtk.Label("Name:"),0,0,1,1)
    self.newservername=Gtk.Entry()
    cont.attach(self.newservername,1,0,2,1)
    cont.attach(Gtk.Label("URL:"),0,1,1,1)
    self.newserverurl=Gtk.Entry()
    cont.attach(self.newserverurl,1,1,2,1)
    applybut=Gtk.Button("Apply")
    applybut.connect("clicked", self.add_server)
    cont.attach(applybut,1,2,1,1)
    resetbut=Gtk.Button("Reset")
    cont.attach(resetbut,2,2,1,1)
    return cont

  def gen_server_edit(self):
    cont=Gtk.Grid()
    cont.attach(Gtk.Label("Name:"),0,0,1,1)
    self.editservername=Gtk.Entry()
    cont.attach(self.editservername,1,0,1,1)
    cont.attach(Gtk.Label("URL:"),0,1,1,1)
    self.editserverurl=Gtk.Entry()
    cont.attach(self.editserverurl,1,1,1,1)
    applybut=Gtk.Button("Apply")
    applybut.connect("clicked", self.edit_server)
    cont.attach(applybut,0,2,1,1)
    resetbut=Gtk.Button("Reset")
    cont.attach(resetbut,1,2,1,1)
    return cont

  def gen_server_delete(self):
    but=Gtk.Button("Delete")
    but.connect("clicked", self.delete_server)
    return but


class scnServerNode(Gtk.ListBoxRow):
  parent=None
  name=None
  def __init__(self, _name, _parent):
    self.parent=_parent
    self.name=_name
    Gtk.ListBoxRow.__init__(self)
    name_button=Gtk.Button(_name)
    name_button.connect("clicked",self.click)
    self.add(name_button)
  def click(self,button):
    dialog = scnServerDialog(self.parent,self.name)
    try:
      if dialog.run()==True:
          #if self.parent.linkback.main.scn_servers.update_node(self.name)==True:
        self.parent.state_widget.set_text("Success")
      else:
        self.parent.state_widget.set_text("Error")
        #if self.parent.linkback.c_delete_friend(self.name)==True:
        #  self.parent.state_widget.set_text("Success")
        pass
    except Exception as e:
      printerror(e)
    dialog.destroy()



"""
scn_client_node=None


@app.route('/server/<server>')
@app.route('/server/<server>/<name>')
@app.route('/server/<server>/<name>/<service>')
@app.route('/server')
@app.route('/')
def generate_server_nav(server=None,name=None,service=None):
  if "Klsls" in scn_client_node.clientactions_bool:
    scn_client_node.c_info(server)
    return template("server_nav",server=server,name=name,service=service,return_state=None,return_list=None)
  elif "Klsls" in scn_client_node.clientactions_list:
    scn_client_node.c_info(server)
    return template("server_nav",server=server,name=name,service=service,return_state=None,return_list=None)
  else:
    return template("server_nav",server=server,name=name,service=service,return_state=None,return_list=None)


@app.route('/friends/<node>')
@app.route('/friends')
def generate_client_nav(node=None):
  return template("client_nav",node=node,return_state=None,return_list=None)

@app.route('/actions/<action>')
def do_action(action):
  pass

@app.route('/static/:path#.+#')
def server_static(path):
    return static_file(path, root=curdir+'/static')


#def do_action(action,server):
#    return template('<b>Hello {{name}}</b>!', name=name)
"""

def scn_send(_string,_socket):
  temp=bytes(_string,"utf-8")
  start=0
  while start < len(temp):
    _socket.sendall(scn_format.pack(temp[start:start+buffersize]))
    start+=buffersize
  _socket.sendall(scn_format.pack(temp[start:start+buffersize-(len(temp)%buffersize)]))

def scn_send_bytes(_byteseq,_socket,end=False):
  len_byte_seq=len(_byteseq)
  _socket.sendall(scn_format.pack(b"bytes"+bytes(sepc,"utf8")+bytes(str(len_byte_seq),"utf8")+bytes(sepc,"utf8")))
  _socket.setblocking(True)
  is_accepting=str(_socket.recv(buffersize),"utf8").replace("\0","").replace("\n","")
  print(is_accepting)
  if is_accepting=="y":
    temp_format_bytes=struct.Struct(">"+str(buffersize+1)+"s")
    if end==False:
      _socket.sendall(temp_format_bytes.pack(_byteseq+bytes(sepc)))
    else:
      _socket.sendall(temp_format_bytes.pack(_byteseq+bytes(sepm)))
    print("FInisisi")
    #_socket.setblocking(False)
    return True
  else:
    return False



def scn_receive(_socket,max_ob_size=max_normal_size):
  _buffer=""
  temp=[]
  for protcount in range(0,protcount_max):
    #cleanup buffer
    _buffer=_buffer.replace("\n","").replace("\0","")
    #split buffer
    if len(_buffer)>0:
      if _buffer[-1]==sepc:
        temp+=_buffer.split(sepc)[:-1]
        _buffer=""
      else:
        #if sepm, buffer ends with sepm
        temp+=_buffer.split(sepc)[:-1]
        _buffer=_buffer.split(sepc)[-1]
    #case bytewise transfer
    print(_buffer)
    print(temp)
    if len(temp)>=2 and temp[-2]=="bytes":
      print("byteiiii")
      _socket.setblocking(True)
      try:
        _size=int(temp[-1])
      except Exception as e:
        printdebug("Bytesequence: Conversion into len (Int) failed")
        printdebug(e)
        try:
          print("answered")
          _socket.sendall(b"n")
        except Exception:
          pass
        return None
      try:
        if _size<max_ob_size:
          
          print("answered")
          _socket.sendall(b"y")
          scn_format2=struct.Struct(">"+str(_size)+"s")
          temp2=_socket.recv(_size)
          #check if size fits
          if len(temp2)==_size:
            temp=temp[:-2]+[scn_format2.unpack(temp2)[0],]
          else:
            printerror("Bytesequence: Incorrect size")
            printerror(temp2)
            return None
          #because ssl sockets support no peek
          checkif_sepm=_socket.recv(buffersize)
          if checkif_sepm==bytes(sepm):
            return temp
          elif checkif_sepm==bytes(sepc):
            pass
          else:
            printdebug("Bytesequence: should be closed with either sepc or sepm")
        else:
          printdebug("Bytesequence: too big")
          _socket.sendall(b"n")

      except socket.timeout or SSL.WantReadError:
        printerror("Bytesequence: Timeout or SSL.WantReadError")
        return None
      except Exception as e:
        printerror("Bytesequence: error while receiving")
        printerror(e)
        return None
      print("bytes over")
    
    if _buffer!="" and _buffer.find(sepm)!=-1:
      break

    try:
      temp3=_socket.recv(buffersize)
    except socket.timeout or SSL.WantReadError:
      printdebug("Command: Timeout or SSL.WantReadError")
      return None
    except Exception as e:
      printerror("Command: error while receiving")
      printerror(e)
      return None
    
    if len(temp3)==buffersize:
      _buffer+=scn_format.unpack(temp3)[0].decode("utf-8")
    else:
      printerror("Main: Invalid size:"+str(len(temp3)))
      printerror(temp3)
      return None
  temp+=[_buffer.split(sepm,1)[0],] #sepm should be end, if not don't care
  return temp




"""
  printdebug("Publiccert doesn't exist. Generate new")
  success=False
  _cert = crypto.X509()
  _cert.get_subject().CN = "scn.node"
  _cert.set_issuer(_cert.get_subject())
  _cert.set_version(0)
  _cert.add_extensions([
    crypto.X509Extension(b"basicConstraints", True, b"CA:TRUE, pathlen:0"),
    crypto.X509Extension(b"keyUsage", True, b"keyCertSign, cRLSign"),
    crypto.X509Extension(b"subjectKeyIdentifier", False, b"hash", subject=_cert), ])
  _cert.add_extensions([
    crypto.X509Extension(b"authorityKeyIdentifier", False, b"keyid:always",issuer=_cert),])

  _cert.set_pubkey(_key)
  #TODO: expose hash choice
  _cert.sign(_key, "sha512")
  with open(_path+".pub", 'wb') as writeout:
    writeout.write(crypto.dump_certificate(crypto.FILETYPE_PEM,_cert))
    success=True
  return success"""







"""
  _key = crypto.PKey()
  _key.generate_key(crypto.TYPE_RSA,key_size)
  privkey=None
  if _passphrase==None:
    privkey=crypto.dump_privatekey(crypto.FILETYPE_PEM,_key)
  else:
    #TODO: expose cipher choice
    privkey=crypto.dump_privatekey(crypto.FILETYPE_PEM,_key,"CAMELLIA256",_passphrase)
  with open(_path+".priv", 'wb') as writeout:
    writeout.write(privkey)
    os.chmod(_path+".priv",0o700)
  try:
    os.remove(_path+".pub")
  except FileNotFoundError:
    pass
  check_certs(_path,_passphrase)"""


def scn_unpack(_packedbytes):
  return scn_format.unpack(_packedbytes).decode("utf-8")

def scn_pack_bytes(_byteseq):
  return scn_format.pack(bytes(_byteseq))

def scn_unpack_bytes(_packedbytes):
  return scn_format.unpack(_packedbytes)


#just already available buffer means no []
def scn_receive_old(_socket,max_ob_size=max_normal_size):
  rettemp=[]
  try:
    _buffer=_socket.recv(4)
  except socket.timeout:
    return None
  except Exception as e:
    printdebug (e)
    return None
  while len(_buffer)>0 and _buffer[-1]!=bytes(sepm,"utf8"):
    if _buffer[-1]==bytes(sepc,"utf8"):
      rettemp+=[_buffer[:-1].decode("utf8"),]
      _buffer=b""
      if len(rettemp)>=2 and rettemp[-2]=="bytes":
        if int(rettemp[-1])>0 and int(rettemp[-1])<max_ob_size:
          _socket.sendall(b"y")
          rettemp=rettemp[:-2]+[_socket.recv(rettemp[-1]).decode("utf8"),]
        else:
          _socket.sendall(b"n")
    elif _buffer[-1]==b"\n" or _buffer[-1]==b"\0":
      _buffer=_buffer[:-1]
    try:
      _buffer+=_socket.recv(1)
    except socket.timeout:
      return None
    except Exception as e:
      printdebug (e)
      return None
  rettemp+=[_buffer[:-1],]
  return rettemp

  def update_friend_auth_send(self,_socket,_name,_old_key,_pubkey_new):
    tempkey2=RSA.importKey(_old_key)
    signer=PKCS1_PSS.new(tempkey2)
    _name_hashed=hashlib.SHA256(_stamp)
    if not verifier.verify(_name_hashed,_signed_stamp): 
      return False
    if scn_friends.update_friend(_name,_pubkey):
      scn_send("success"+sepm,_socket)
    else:
      scn_send("error"+sepc+"auth"+sepm,_socket)


#pub auth
  def update_friend_auth_recv(self,_socket,_name,_pubkey_new,_signed_stamp,_stamp):
    if _pubkey_new==b"":
      scn_send("error"+sepc+"key empty"+sepm,_socket)
      return
    _old_key=self.scn_friends.get_pubkey(self,_name)
    if _old_key==None:
      scn_send("error"+sepc+"name not exist"+sepm,_socket)
      return
    
    tempkey2=RSA.importKey(_old_key)
    verifier=PKCS1_PSS.new(tempkey2)
    _name_hashed=hashlib.SHA256(_stamp)
    if not verifier.verify(_name_hashed,_signed_stamp): 
      return False
    if scn_friends.update_friend(_name,_pubkey):
      scn_send("success"+sepm,_socket)
    else:
      scn_send("error"+sepc+"auth"+sepm,_socket)


  def parse_return(self,reqreturn):
    temp=reqreturn.split(sepc,1)
    if temp[0]=="error" and len(temp)==2:
      print("Error: "+temp[1])
      return None
    elif temp[0]=="success" and len(temp)==2:
      return temp[1].split(sepc)
    else:
      print("Error: invalid message")
      return None

#scn_friends: _nameid: pubkey,nickname
class scn_friend_list_template(self):
  friend_list=None
  def __init__(self):
    serv_list={}
  def create_friend(self,_proposedname,_pubkey,nickname=None):
    if _proposedname in self.friend_list:
      count=1
      while _proposedname+str(count) in self.friend_list:
        count+=1
    self.friend_list[_proposedname+str(count)]=[_pubkey,nickname]
    return _proposedname+str(count)
  def update_friend(self,_nameid,_pubkey,nickname=None):
    self.friend_list[_nameid][0]=_pubkey
    if nickname!=None:
      self.friend_list[_nameid][1]=nickname
    return True
  def delete_friend(self,_nameid):
    if _name in self.friend_list:
      del self.friend_list[_nameid]
      return True
    else:
      return False
  def get_pubkey(self,_nameid):
    if _name in self.friend_list:
      return self.friend_list[_name][1]
    else:
      return None